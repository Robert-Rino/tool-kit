apiVersion: v1
kind: ConfigMap
metadata:
  name: soketi
  namespace: soketi
data:
  soketi.json : |-
    {
        "debug": true,
        "adapter": {
            "driver": "redis",
            "redis": {
                "prefix": "soketi-",
                "clusterMode": false
            }
        }
    }


  SOKETI_DB_REDIS_HOST: redis.soketi.svc.cluster.local

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress
data:
  nginx.conf: |
    worker_processes                auto;
    worker_cpu_affinity             auto;

    events {
      worker_connections            65536;
      multi_accept                  off;
      accept_mutex                  off;
      use                           epoll;
    }

    http {
      resolver                      metadata.google.internal valid=1h;

      real_ip_header                X-Forwarded-For;
      real_ip_recursive             on;

      include                       mime.types;
      default_type                  application/octet-stream;

      server_names_hash_bucket_size 128;
      tcp_nopush                    on;
      tcp_nodelay                   on;
      client_max_body_size          1M;

      # https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340
      keepalive_timeout             650;
      # keepalive_requests            10000;

      proxy_cache_path              /var/cache/nginx levels=1:2 keys_zone=cache:128m inactive=10m max_size=64G;

      limit_req_zone                $binary_remote_addr zone=ip:100m rate=6000r/m;
      limit_req_status              429;


      upstream soketi {
          server soketi-swag-soketi.soketi.svc.cluster.local:6001;
      }

      server {
        location / {
            proxy_pass             soketi;
            proxy_read_timeout     60;
            proxy_connect_timeout  60;
            proxy_redirect         off;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        access_log off;
        error_log  /var/log/nginx/socket.nino.baby.log error;
      }
    }
